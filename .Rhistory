"Freezing Fog","Hail","Heat","Heavy Rain","Heavy Snow","High Surf","High Wind","Hurricane (Typhoon)",
"Ice Storm","Lake-Effect Snow","Lakeshore Flood","Lightning","Marine Hail","Marine High Wind",
"Marine Strong Wind","Marine Thunderstorm Wind","Rip Current","Seiche","Sleet","Storm Surge/Tide",
"Strong Wind","Thunderstorm Wind","Tornado","Tropical Depression","Tropical Storm","Tsunami",
"Volcanic Ash","Waterspout","Wildfire","Winter Storm","Winter Weather")
event.list <- tolower(event.list)
rename <- subset(storm, !(evtype %in% event.list),select = c(evtype,fatalities,injuries,propdmg,cropdmg,totaldmg))
renametable <- as.data.frame(table(rename$evtype))
renametable <- renametable[order(-renametable$Freq),1]
l1 <- as.vector(head(renametable,10))
#Ten most damaging event types
renamesum <- aggregate(x = rename[,c(2:6)], by = list(evtype = rename$evtype), FUN = sum)
l2 <- tail(renamesum[order(renamesum$fatalities),],10)
l3 <- tail(renamesum[order(renamesum$injuries),1],10)
l4 <- tail(renamesum[order(renamesum$totaldmg),1],10)
l5 <- tail(renamesum[order(renamesum$cropdmg),1],10)
l6 <- tail(renamesum[order(renamesum$propdmg),1],10)
l7 <- c(l1,l2,l3,l4,l5,l6)
l7 <- unique(l7)
l7
rename <- subset(storm, !(evtype %in% event.list),select = c(evtype,fatalities,injuries,propdmg,cropdmg,totaldmg))
renametable <- as.data.frame(table(rename$evtype))
renametable <- renametable[order(-renametable$Freq),1]
l1 <- as.vector(head(renametable,10))
l1
l2
l2 <- tail(renamesum[order(renamesum$fatalities),1],10)
l2
l2 <- tail(renamesum[order(renamesum$fatalities),1],10)
l3 <- tail(renamesum[order(renamesum$injuries),1],10)
l4 <- tail(renamesum[order(renamesum$totaldmg),1],10)
l5 <- tail(renamesum[order(renamesum$cropdmg),1],10)
l6 <- tail(renamesum[order(renamesum$propdmg),1],10)
l7 <- c(l1,l2,l3,l4,l5,l6)
l7 <- unique(l7)
l7
library(ggplot2)
install.packages("gridExtra")
library(gridExtra)
health1 <- ggplot(fatalities, aes(x = reorder(evtype,-fatalities),y = fatalities)) +
geom_bar(stat="identity")+
labs(x='Event Type',y='Fatalities') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
health2 <- ggplot(injuries, aes(x = reorder(evtype,-injuries),y = injuries)) +
geom_bar(stat="identity")+
labs(x='Event Type',y='Injuries') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
grid.arrange(health1,health2,nrow=2)
library(reshape2)
econ <- rbind(property,crops)
econ <- rbind(econ,total)
econ <- unique(econ)
econ <- melt(econ, id.vars = 'evtype')
econ <- econ[order(econ$variable,decreasing = T),]
econ$variable <- factor(econ$variable,levels=c("totaldmg","propdmg","cropdmg"))
econ1 <- ggplot(econ, aes(x= reorder(evtype,value), y=value)) +
geom_bar(stat='identity') +
facet_grid(.~variable) +
labs(x='Event Type',y='US Dollars') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
econ1
econ1 <- ggplot(econ, aes(x= reorder(evtype,-value), y=value)) +
geom_bar(stat='identity') +
facet_grid(.~variable) +
labs(x='Event Type',y='US Dollars') +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
econ1
pt(.95,8)
qt(.95,8)
qt(.95,df = 8)*30*c(1,-1)+1100
qt(.95,df = 8)
bv <- rnorm(9, mean = 1100, sd = 30)
t.test(bv)
1.96*30*c(1,-1)+1100
qt(.95,df = 8)
qt(df = 8)
qt(.9,df = 8)
qt(.95,df = 8)
2.306*30*c(1,-1)+1100
t.test(bv,conf.level = .95)
t.test(bv,conf.level = .90)
t.test(bv,conf.level = .05)
t.test(bv,conf.level = .95)
qt(.95,df = 8)
qt(.95,df = 9)
qt(1,df = 8)
qt(.9,df = 8)
qt(.99,df = 8)
1100+c(1,-1)*qt(.95,8)*30/sqrt(9)
0=1100+*qt(.975,8)*30/sqrt(9)
qt(.975,df = 8)
1100+c(1,-1)*qt(.975,8)*30/sqrt(9)
-2+c(1,-1)*qt(.975,8)*.3/sqrt(9)
-2+c(1,-1)*qt(.975,8)*2.6/sqrt(9)
-2+c(1,-1)*qt(.975,8)*1.5/sqrt(9)
-2+c(1,-1)*qt(.975,8)*2.1/sqrt(9)
new <- rnorm(10, mean=3,sd=.6)
old <- rnorm(10, mean=5, sd=.68)
difference <- new-old
t.test(difference,paired=FALSE,var.equal = TRUE,conf.level = .975)
t.test(new,old,paired=FALSE,var.equal = TRUE,conf.level = .975)
t.test(new,old,paired=FALSE,var.equal = TRUE,conf.level = .95)
t.test(new~old,paired=FALSE,var.equal = TRUE,conf.level = .95)
pve <- sqrt((9*5^2+9*3^2)/(10+10-2))
3-5+c(1,-1)*qt(.975,18)*pve*(1/10+1/10)^.5
pve <- sqrt((9*.68^2+9*.6^2)/(10+10-2))
3-5+c(1,-1)*qt(.975,18)*pve*(1/10+1/10)^.5
pve <- sqrt((9*.68^2+9*.6^2)/(10+10-2))
3-5+c(1,-1)*qt(.95,18)*pve*(1/10+1/10)^.5
3-5+c(1,-1)*qt(.975,20)*pve*(1/10+1/10)^.5
pve <- sqrt((9*.68^2+9*.6^2)/(10+10-2))
3-5+c(1,-1)*qt(.975,18)*pve*(1/10+1/10)^.5
3-5+c(1,-1)*qt(.975,18)*pve*sqrt(1/10+1/10)
3-5+c(1,-1)*qt(.975,18)*pve*sqrt(1/10+1/10)
new <- rnorm(10, mean=3,sd=.6)
old <- rnorm(10, mean=5, sd=.68)
t.test(new,old,paired=FALSE,var.equal = TRUE,conf.level = .95)
t.test(new,old,paired=FALSE,var.equal = TRUE)
difference <- new-old
t.test(difference,paired=FALSE,var.equal = TRUE)
t.test(difference,var.equal = TRUE)
t.test(difference)
mse
mse <- (m1+m2)/2
mse
m1 <- 3
m2 <- 5
var1 <- .6
var2 <- .68
n1 <- 10
n2 <- 10
mse <- (m1+m2)/2
mse
mse <- (var1+var2)/2
mse
sm1m2 <- sqrt((2*mse)/10)
m1m2 <- m1-m2
tcl <- qt(.975,18)
m1m2-tcl*sm1m2
m1m2+tcl*sm1m2
m1 <- 4
m2 <- 6
var1 <- .5
var2 <- 2
n1 <- 100
n2 <- 100
mse <- (var1+var2)/2
mse
sm1m2 <- sqrt((2*mse)/100)
m1m2 <- m1-m2
m1m2-1.96*sm1m2
m1m2+1.96*sm1m2
m1m2 <- m2-m1
m1m2-1.96*sm1m2
m1m2+1.96*sm1m2
m1 <- -3
m2 <- 1
var1 <- 1.5
var2 <- 1.8
n1 <- 9
n2 <- 9
mse <- (var1+var2)/2
mse
sm1m2 <- sqrt((2*mse)/((n1+n2)/2))
m1m2 <- m1-m2
tcl <- qt(.975,n1+n1-2)
m1m2-1.96*sm1m2
m1m2+1.96*sm1m2
tcl <- qt(.95,n1+n1-2)
m1m2-1.96*sm1m2
m1m2+1.96*sm1m2
tcl <- qt(.95,n1+n1-2)
m1m2-tcl*sm1m2
m1m2+tcl*sm1m2
m1 <- -3
m2 <- 1
var1 <- 1.5
var2 <- 1.8
n1 <- 9
n2 <- 9
mse <- (var1+var2)/2
mse
sm1m2 <- sqrt((2*mse)/((n1+n2)/2))
m1m2 <- m1-m2
tcl <- qt(.9,n1+n1-2)
m1m2-tcl*sm1m2
m1m2+tcl*sm1m2
treated <- rnorm(9,mean =-3,sd = 1.5)
placebo <- rnorm(9,mean =1,sd = 1.8)
difference <- treated-placebo
t.test(difference,var.equal = TRUE,conf.level = .9)
m1 <- -3
m2 <- 1
var1 <- 1.5
var2 <- 1.8
n1 <- 9
n2 <- 9
mse <- (var1+var2)/2
mse
sm1m2 <- sqrt((2*mse)/((n1+n2)/2))
m1m2 <- m1-m2
tcl <- qt(.925,n1+n1-2)
m1m2-tcl*sm1m2
m1m2+tcl*sm1m2
treated <- rnorm(9,mean =-3,sd = 1.5)
placebo <- rnorm(9,mean =1,sd = 1.8)
difference <- treated-placebo
t.test(difference,var.equal = TRUE,conf.level = .9)
t.test(difference,var.equal = FALSE,conf.level = .9)
t.test(treated,placebo,var.equal = FALSE,conf.level = .9)
treated <- rnorm(9,mean =-3,sd = 1.5)
placebo <- rnorm(9,mean =1,sd = 1.8)
difference <- treated-placebo
t.test(treated,placebo,var.equal = FALSE,conf.level = .9)
t.test(treated,placebo,var.equal = FALSE,conf.level = .95)
t.test(treated,placebo,var.equal = FALSE,conf.level = .85)
t.test(treated,placebo,var.equal = FALSE,conf.level = .80)
m1 <- -3
m2 <- 1
var1 <- 1.5
var2 <- 1.8
n1 <- 9
n2 <- 9
mse <- (var1+var2)/2
mse
sm1m2 <- sqrt((2*mse)/((n1+n2)/2))
m1m2 <- m1-m2
tcl <- qt(.925,n1+n1-2)
tcl <- qt(.95,n1+n1-2)
m1m2-tcl*sm1m2
m1m2+tcl*sm1m2
treated <- rnorm(9,mean =-3,sd = 1.5)
placebo <- rnorm(9,mean =1,sd = 1.8)
t.test(treated,placebo,var.equal = FALSE,conf.level = .80)
t.test(treated,placebo,var.equal = TRUE,conf.level = .80)
t.test(treated,placebo,var.equal = TRUE,conf.level = .90)
treated <- rnorm(9,mean =-3,sd = 1.5)
placebo <- rnorm(9,mean =1,sd = 1.8)
difference <- treated-placebo
t.test(treated,placebo,var.equal = TRUE,conf.level = .90)
t.test(treated,placebo,paired = TRUE, var.equal = TRUE,conf.level = .90)
treated <- rnorm(9,mean =-3,sd = 1.5)
placebo <- rnorm(9,mean =1,sd = 1.8)
difference <- treated-placebo
t.test(difference,paired = TRUE, var.equal = TRUE,conf.level = .90)
treated <- rnorm(9,mean =-3,sd = 1.5)
placebo <- rnorm(9,mean =1,sd = 1.8)
t.test(treated,placebo,paired = TRUE, var.equal = TRUE,conf.level = .90)
t.test(treated,placebo,paired = FALSE, var.equal = TRUE,conf.level = .90)
t.test(difference)
t.test(difference,conf.level = .9)
t.test(treated,placebo,paired=FALSE,conf.level = .9)
t.test(treated,placebo,paired=FALSE,var.equal = TRUE,conf.level = .9)
t.test(treated,placebo,paired=FALSE,var.equal = FALSE,conf.level = .9)
t.test(treated~placebo,paired=FALSE,var.equal = FALSE,conf.level = .9)
This project will use R to investigate the exponential distribution and compare it with the Central Limit Theorem. The function `{rexp(n, lambda)} The exponential distribution can be simulated in R withwhere lambda is the rate parameter. The mean of exponential distribution is 1/lambda and the standard deviation is also 1/lambda. I will set lambda = 0.2 for all of the simulations. I will investigate the distribution of averages of 40 exponentials. Note that I will need to do a thousand simulations.
numsims <- 1000
lmbd <- 0.2
n <- 40
#A seed will be used for reproducibility
set.seed(123)
expmatrix <- matrix(rexp(numsims * n, rate=lmbd), numsims, n)
expmean <- rowMeans(expmatrix)
library(ggplot2)
ggplot(data = expmean)+geom_hist
hist(expmean, col = "red")
head(expmean)
dim(expmean)
class(expmean)
expmean
expmean <- data.frame(rowMeans(expmatrix))
expmean
class
class(expmean)
names(expmean)
expmean <- data.frame(rowmeans = rowMeans(expmatrix))
names(expmean)
ggplot(data = expmean,aes(x = rowmeans))+geom_hist()
ggplot(data = expmean,aes(x = rowmeans))+geom_histogram()
ggplot(data = expmean,aes(x = rowmeans))+geom_histogram(binwidth=.5,colour = "black",fill = "white")
ggplot(data = expmean,aes(x = rowmeans))+
geom_histogram(binwidth=.5,colour = "black",fill = "white")+
theme_bw()
ggplot(data = expmean,aes(x = rowmeans))+
geom_histogram(binwidth=.5,colour = "black",fill = "gray")+
theme_bw()
ggplot(data = expmean,aes(x = rowmeans))+
geom_histogram(binwidth=.1,colour = "black",fill = "gray")+
theme_bw()
ggplot(data = expmean,aes(x = rowmeans))+
geom_histogram(colour = "black",fill = "gray")+
theme_bw()
ggplot(data = expmean,aes(x = rowmeans))+
geom_histogram(binwidth = .2,colour = "black",fill = "gray")+
theme_bw()
ggplot(data = expmean,aes(x = rowmeans))+
geom_histogram(aes(y = ..density..),binwidth = .2,colour = "black",fill = "gray")+
theme_bw()
ggplot(data = expmean,aes(x = rowmeans))+
geom_histogram(aes(y = ..density..),binwidth = .2,colour = "black",fill = "gray")+
stat_function(fun = dnorm, arg = list(mean = expmean$rowmeans,
sd = sd(expmean$rowmeans)))+
theme_bw()
ggplot(data = expmean,aes(x = rowmeans))+
geom_histogram(aes(y = ..density..),binwidth = .2,colour = "black",fill = "gray")+
stat_function(fun = dnorm, arg = list(mean = mean(expmean$rowmeans),
sd = sd(expmean$rowmeans)))+
theme_bw()
head(expmean)
mean(expmean$rowmeans)
mean(expmean$rowmeans)
1/lmbd
mean(expmean$rowmeans)
1/lmbd
mean(expmean$rowmeans) - 1/lmbd
mean(expmean$rowmeans)
1/lmbd
mean(expmean$rowmeans) - 1/lmbd
ggplot(data = expmean,aes(x = rowmeans))+
geom_histogram(aes(y = ..density..),binwidth = .2,colour = "black",fill = "gray")+
stat_function(fun = dnorm, arg = list(mean = 1/lmbd,
sd = 1/lmbd))+
theme_bw()
ggplot(data = expmean,aes(x = rowmeans))+
geom_histogram(aes(y = ..density..),binwidth = .2,colour = "black",fill = "gray")+
stat_function(fun = dnorm, arg = list(mean = 1/lmbd,
sd = sd(expmean$rowmeans)))+
theme_bw()
sd(expmeans$rowmeans)
(1/lambda)/sqrt(n)
sd(expmean$rowmeans)
(1/lambda)/sqrt(n)
sd(expmean$rowmeans)
(1/lmbd)/sqrt(n)
sd(expmean$rowmeans)
(1/lmbd)/sqrt(n)
sd(expmean$rowmeans) - (1/lmbd)/sqrt(n)
ggplot(data = expmean,aes(x = rowmeans))+
geom_histogram(aes(y = ..density..),binwidth = .2,colour = "black",fill = "gray")+
stat_function(fun = dnorm, arg = list(mean = 1/lmbd,
sd = (1/lmbd)/sqrt(n)))+
theme_bw()
library(ggplot2)
names(expmean)
ggplot(data = expmean,aes(x = rowmeans))+
geom_histogram(aes(y = ..density..),binwidth = .1,colour = "black",fill = "gray")+
stat_function(fun = dnorm, arg = list(mean = 1/lmbd,
sd = (1/lmbd)/sqrt(n)))+
theme_bw()
ggplot(data = expmean,aes(x = rowmeans))+
geom_histogram(aes(y = ..density..),binwidth = .05,colour = "black",fill = "gray")+
stat_function(fun = dnorm, arg = list(mean = 1/lmbd,
sd = (1/lmbd)/sqrt(n)))+
theme_bw()
ggplot(data = expmean,aes(x = rowmeans))+
geom_histogram(aes(y = ..density..),binwidth = .3,colour = "black",fill = "gray")+
stat_function(fun = dnorm, arg = list(mean = 1/lmbd,
sd = (1/lmbd)/sqrt(n)))+
theme_bw()
ggplot(data = expmean,aes(x = rowmeans))+
geom_histogram(aes(y = ..density..),binwidth = .4,colour = "black",fill = "gray")+
stat_function(fun = dnorm, arg = list(mean = 1/lmbd,
sd = (1/lmbd)/sqrt(n)))+
theme_bw()
md <- mean(expmean$rowmeans)
md
mt <- 1/lmbd
md - mt
dvar <- sd(expmean$rowmeans)^2
tvar <- ((1/lmbd)/sqrt(n))^2
dvar - tvar
ggplot(data = expmean,aes(x = rowmeans))+
geom_histogram(aes(y = ..density..),binwidth = .4,colour = "black",fill = "gray")+
stat_function(fun = dnorm, arg = list(mean = 1/lmbd,
sd = (1/lmbd)/sqrt(n)))+
theme_bw()
#Statistical Inference Course Project
Tony Dreher
##Overview
This project will use R to investigate the exponential distribution and compare it with the Central Limit Theorem. The function `rexp(n, lambda)` can simulate the exponential distribution in R where lambda is the rate parameter. The mean of the exponential distribution is 1/lambda and the standard deviation is also 1/lambda. Lambda will be set to `0.2` for all simulations. The distribution of averages of 40 exponentials will be used for the investigation. A thousand simulations will be necessary for a sufficient sample size.
To illustrate via simulation and associated explanatory text the properties of the distribution of the mean of 40 exponentials, we will show the following:
1. The sample mean and how it compares to the theoretical mean of the distribution.
2. How variable the sample is (via variance) and how it compares to the theoretical variance of the distribution.
3. That the distribution is approximately normal.
```{r}
```
anova(mpgammodel, bestmodel)
library(caret)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
library(randomForest)
install.packages("caret")
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
library(randomForest)
install.packages("rpart")
install.packages("rpart.plot")
install.packages("RColorBrewer")
install.packages("rattle")
install.packages("randomForest")
library(caret)
library(rpart)
library(rpart.plot)
library(RColorBrewer)
library(rattle)
library(randomForest)
set.seed(666)
training <- read.csv(url("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"), na.strings=c("NA","#DIV/0!",""))
training <- read.csv(url("http://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"), na.strings=c("NA","#DIV/0!",""))
source('~/.active-rstudio-document', echo=TRUE)
install.packages("AppliedPredictiveModeling"library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling"
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rpart)
install.packages(rattle)
set.seed(125)
inTrain <- createDataPartition(y = segmentationOriginal$Case, list = FALSE)
train <- subset(segmentationOriginal, Case == "Train")
test <- subset(segmentationOriginal, Case == "Test")
# 2. Set the seed to 125 and fit a CART model with the rpart method using all
# predictor variables and default caret settings.
modFit <- train(Class ~ ., data = train, method = "rpart")
modFit$finalModel
# 3. In the final model what would be the final model prediction for cases with the following variable values:
# Look at the output
# a. TotalIntench2 = 23,000; FiberWidthCh1 = 10; PerimStatusCh1=2       PS
# b. TotalIntench2 = 50,000; FiberWidthCh1 = 10;VarIntenCh4 = 100       WS
# c. TotalIntench2 = 57,000; FiberWidthCh1 = 8;VarIntenCh4 = 100        PS
# d. FiberWidthCh1 = 8;VarIntenCh4 = 100; PerimStatusCh1=2              Not possible to predict
plot(modFit$finalModel, uniform = TRUE, main = "Classification Tree")
text(modFit$finalModel, use.n = TRUE, all = TRUE, cex = .8)
fancyRpartPlot(modFit$finalModel)
fancyRpartPlot(modFit)
predict(modFit, newdata = train)
inTrain <- createDataPartition(y = segmentationOriginal$Case, list = FALSE)
install.packages("rattle")
library(rattle)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
library(rpart)
library(ggplot2)
library(rattle)
## Rattle: A free graphical interface for data mining with R.
## Version 3.4.1 Copyright (c) 2006-2014 Togaware Pty Ltd.
## Type 'rattle()' to shake, rattle, and roll your data.
training<-segmentationOriginal[segmentationOriginal$Case=="Train",]
testing<-segmentationOriginal[segmentationOriginal$Case=="Test",]
set.seed(125)
model<-train(Class ~ .,
data = training,
method = "rpart")
## Loading required namespace: e1071
fancyRpartPlot(model$finalModel)
model<-train(Class ~ .,
data = training,
method = "rpart")
library(caret)
install.packages("caret")
library(caret)
library(rpart)
library(ggplot2)
library(rattle)
## Rattle: A free graphical interface for data mining with R.
## Version 3.4.1 Copyright (c) 2006-2014 Togaware Pty Ltd.
## Type 'rattle()' to shake, rattle, and roll your data.
training<-segmentationOriginal[segmentationOriginal$Case=="Train",]
testing<-segmentationOriginal[segmentationOriginal$Case=="Test",]
set.seed(125)
model<-train(Class ~ .,
data = training,
method = "rpart")
## Loading required namespace: e1071
fancyRpartPlot(model$finalModel)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
myPlot
manipulate(myPlot(s), s = slider(0, 2, step = 0.1))
install.packages("devtools")
library(devtools)
library(datasets)
library(shiny)
install.packages("shiny")
library(shiny)
library(shiny)
install.packages("shiny")
library(shiny)
library(rtools)
install.packages("rtools")
library(rtools)
require(devtools)
install.packages("devtools")
install_github("slidify", "ramnathv")
install_github("slidifyLibraries", "ramnathv")
library(slidify)
author("mydeck")
install.packages("manipulate")
install.packages("devtools")
setwd("C:/Users/drehert/Documents/mydeck")
publish(title = 'DevelopingDataProducts', 'index.html', host = 'rpubs')
library(slidify)
publish(title = 'DevelopingDataProducts', 'index.html', host = 'rpubs')
